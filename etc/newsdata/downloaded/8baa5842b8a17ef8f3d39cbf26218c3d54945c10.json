{"pub": "thenextweb", "url": "https://thenextweb.com/dd/2019/10/14/bel-is-a-new-lisp-style-programming-language-from-y-combinator-founder-paul-graham", "downloaded_at": "2019-10-14 10:11:56.068587+00:00", "title": "Bel is a new LISP-style programming language from Y Combinator founder Paul Graham", "language": "en", "text": "Paul Graham is perhaps best known for two things: co-founding Y Combinator, and his tireless advocacy of LISP programming languages. And on Saturday, the legendary investor and essayist released his own LISP dialect, called Bel.\n\nWhat I've been working on for the last several years: Bel. https://t.co/Tk9KFlw8Gl \u2014 Paul Graham (@paulg) October 12, 2019\n\nBel is interesting, not least because it highlights the enduring and improbable longevity of one of the earliest high-level programming languages. That\u2019s no small feat, especially given the hype-driven nature of the software development sphere, where front-end JavaScript frameworks emerge and disappear on a near-weekly basis.\n\nThat said, before we delve into the technical weeds, it\u2019s probably worth doing a bit of a recap on LISP.\n\nThe origins of LISP\n\nLISP started life in 1958, when mathematician and computer scientist John McCarthy published a paper called \u201cRecursive Functions of Symbolic Expressions and Their Computation by Machine, Part I.\u201d His goal was to create a system of mathematical notation for algorithms, rather than a fleshed-out programming language. History, however, had other ideas. McCarthy\u2019s ideas caught traction, and a few years later, researcher Steve Russell wrote the first LISP interpreter on an IBM 704 computer.\n\nFor the next thirty or so years, LISP would be an area of focus for computer scientists. The language fragmented into multiple distinct and interesting dialects which pioneered concepts still used today, like running code through REPL (read, eval, print loop) environments. Much of the early work in AI was also written in LISP.\n\nBeyond the academic sphere, LISP found favor with a vocal niche of developers, most notably Paul Graham and Eric Raymond. Although it lacks the mainstream success of Python and Java, there are those who insist it\u2019s the greatest thing since sliced bread. And LISP\u2019s advocates make a compelling case.\n\nLISP inherently lends itself to the creation of code that\u2019s readable and expressive, as explained by Peter Serbel:\n\n\u2026a Common Lisp program tends to provide a much clearer mapping between your ideas about how the program works and the code you actually write. Your ideas aren\u2019t obscured by boilerplate code and endlessly repeated idioms. This makes your code easier to maintain because you don\u2019t have to wade through reams of code every time you need to make a change. Even systemic changes to a program\u2019s behavior can often be achieved with relatively small changes to the actual code. This also means you\u2019ll develop code more quickly; there\u2019s less code to write, and you don\u2019t waste time thrashing around trying to find a clean way to express yourself within the limitations of the language.\n\nAnd in the same way that learning Latin makes you better at languages, many argue that learning LISP makes you a better programmer. Here\u2019s what Eric Raymond wrote in his essay titled \u201cHow to become a hacker:\u201d\n\nLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\n\nMeet Bel\n\nSo, let\u2019s go back to Bel.\n\nSome readers will already know that Graham already created his own LISP dialect, called Arc. Bel is separate to that.\n\nPerhaps the most intriguing facet of Bel is that its development is intended to mirror that of the original LISP spec as much as possible, even if the language diverts from it in some parts.\n\nJust like LISP started life as a system of notation and later evolved into a fully-fledged programming language, Graham wants to keep Bel in its incubation period for as long as possible. Here\u2019s what he wrote in the guide to the language:\n\nBel is an attempt to answer the question: what happens if, instead of switching from the formal to the implementation phase as soon as possible, you try to delay that switch for as long as possible? If you keep using the axiomatic approach till you have something close to a complete programming language, what axioms do you need, and what does the resulting language look like?\n\nBy doing this, Graham hopes to answer the question: \u201cIf computers were as powerful as we wanted, what would languages look like?\u201d\n\nBel is an interesting experiment, and I\u2019m interested to see where it leads. Although Graham has published a guide to the language, along with some source code, I\u2019d recommend you hold fire before you add it to your LinkedIn profile. \u201cThis is not a language you can use to program computers, just as the Lisp in the 1960 paper wasn\u2019t,\u201d Graham wrote.\n\nBel was so much more work than you'd guess from looking at it. But this seemed a good sign. I can't stand wasting time, and if one can spend a lot of time on a project without feeling one is wasting it, the project should be proportionally promising. \u2014 Paul Graham (@paulg) October 13, 2019\n\nAlthough he has no plans to write a formal implementation that would allow developers to write Bel programs (at least, not just yet), Graham has no qualms with the community making one.\n\n\u201cIf you\u2019d like to try writing an implementation based on Bel, please do. I\u2019ll be one of your first users,\u201d he said.\n\nRead next: How to watch Google's Pixel 4 launch event", "description": "Bel proves LISP still has value in 2019", "authors": ["Matthew Hughes"], "top_image": "https://img-cdn.tnwcdn.com/image/tnw?filter_last=1&fit=1280%2C640&url=https%3A%2F%2Fcdn0.tnwcdn.com%2Fwp-content%2Fblogs.dir%2F1%2Ffiles%2F2019%2F10%2F12810692024_240cbd92d6_o-Cropped-1.jpg&signature=07af4ee079b6bb747ba1a657d61cfef3", "published_at": "2019-10-14"}