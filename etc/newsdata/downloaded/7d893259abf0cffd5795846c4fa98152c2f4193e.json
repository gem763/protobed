{"pub": "zdnet", "url": "https://www.zdnet.com/article/software-delivery-management-erp-for-it-redux", "downloaded_at": "2019-09-13 18:07:31.061857+00:00", "title": "Software delivery management: ERP for IT redux?", "language": "en", "text": "DevOps in the cloud: Best practices and pitfalls for cloud deployment and development from Copado David Brooks, VP of Products at Copado, explains how companies can use DevOps for large-scale cloud deployments and how to avoid common cloud development mistakes.\n\nI attended Jenkins World in San Francisco a couple weeks back. One thing that stood out was CloudBees' advocacy of a new market concept, software delivery management (SDM). CloudBees provides the following definition of SDM:\n\nSoftware delivery management helps organizations streamline CI/CD processes and foster meaningful collaboration across all functions involved in software development and delivery. Its purpose is to increase software delivery velocity, quality, predictability, and value, which consequently results in improved customer and user satisfaction and better business results.\n\nSeems like a reasonable set of goals. SDM, as CloudBees describes it, is similar to value stream management (VSM). However, CloudBees really caught my attention when, in (on-the-record) briefings for analysts, it compared its SDM vision to enterprise resource planning (ERP) vendor SAP.\n\nSAP? This might be surprising to many in the DevOps community. However, it makes perfect sense to me.\n\nI've long wondered: Most of the C-suite is well served by ERP vendors such as SAP and Oracle; why not the CIOs of the world? Why are their tools so fragmented? Why does the cobbler go barefoot? It's not a new question nor a new branding idea. Various IT service management (ITSM) vendors have experimented with \"ERP for IT\" messaging but didn't get much traction. Why not? And what might be different with SDM?\n\nI think the biggest problem for the ITSM vendors is that they were starting at the end of the digital value stream, at the phase of operations and support, when the harder and more valuable aspect is upstream, in software development.\n\nBefore continuous delivery, upstream was a world of project management where (oftentimes) the build and deploy toolchains were unique to each project. Now, the industry has a solidifying vision for a continuous delivery conceptual architecture that spans projects (which are increasingly turning into steady-state products).[i] Story, commit, build, package, provision, deploy, operate -- the deepening, DevOps-driven industry consensus here is a big step forward and might well be \"what's different this time around.\"\n\nHowever, what can we do with this consolidated \"digital supply chain\" data? Magic does not happen just because we have the data integrated into a common repository. This is cargo cult thinking. We need clear use cases. ERP systems, and their MRP (materials requirements planning) predecessors, have great clarity of purpose -- reducing inventory carrying costs by significant factors through better order scheduling, for example. SDM needs to further articulate such benefits.\n\nCan we decrease inventory (i.e., the invisible inventory of \"design in process,\" as Don Reinertsen has called it)?[ii] Better and more quickly identify constraints and bottlenecks, such as not having enough of the right skills at the right time? Increase speed to market? Prune product options more quickly? Increase our speed of learning? Decrease operational or change risk? Restore service more quickly? How does the availability of this new information achieve these value propositions? Can we make an economic case for it?\n\nIt seems like there ought to be value there. But \"seems like there ought to be\" is not a business case, and clarifying that line of sight to value, I think, is a priority. My current hypothesis is that we are going to make more headway by building simulations, rather than trying to solve the digital pipeline's problems analytically.\n\n[i] Mik Kersten, Project to Product: How to Survive and Thrive in the Age of Digital Disruption with the Flow Framework, IT Revolution Press, 2018.\n\n[ii] Donald G. Reinertsen, Managing the Design Factory, Free Press, 1997.\n\nThis post was written by Principal Analyst Charles Betz, and originally appeared here.\n\n\n\n", "description": "CloudBees\u2019 advocacy of a new market concept, software delivery management (SDM).", "authors": ["Forrester Research"], "top_image": "https://zdnet2.cbsistatic.com/hub/i/r/2019/09/13/ebc9fcd1-ed50-4ce2-8885-1337dcdfbe69/thumbnail/770x578/4b9681959efd6361d0c8237c1cc1b709/istock-645164824.jpg", "published_at": "2019-09-13"}