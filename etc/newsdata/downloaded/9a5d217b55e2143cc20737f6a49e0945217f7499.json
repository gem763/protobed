{"pub": "cointelegraph", "url": "https://cointelegraph.com/news/research-claims-eos-network-can-freeze-blockone-denies-any-errors", "downloaded_at": "2019-10-05 13:07:42.766226+00:00", "title": "Research Claims EOS Network Can Freeze, Block.one Denies Any Errors", "language": "en", "text": "Within the past few weeks, EOS blockchain protocol users have been experiencing periodic problems with network access. A recent article written by pseudonymous smart-contract developer and security engineer Dexaran described the apparent root of the problem: an inexpensive technique that allows hackers to \u201ccongest\u201d the network \u2014 or put it into a low-efficiency mode \u2014 with just a few dollar\u2019s worth of EOS.\n\nSeemingly, that exploit allowed a hacker to steal more than $110,000 in cryptocurrency from an EOS gambling application, EOSPlay, earlier in September. However, executives of EOS\u2019s parent firm, Block.one, are not fazed, arguing that the network is operating \u201ccorrectly.\u201d\n\nEOS basics: Governance, staking and congestion mode\n\nEOS.io is a blockchain-powered smart-contract protocol for the development and hosting of decentralized applications (DApps). It employs a consensus model called delegated proof-of-stake (DPoS) and is governed in accordance with the EOS User Agreement (EUA).\n\nPer the agreement, changes to the network can be made when there is a consensus between at least 15 out of 21 Block Producers \u2014 i.e., independent entities that are responsible for processing blocks on the EOS blockchain.\n\nThe protocol is supported by its eponymous native cryptocurrency, currently the seventh-largest asset by total market capitalization. Those tokens are at the core of the in-built resource staking mechanism, one of EOS\u2019s distinctive features. Whenever a transaction is submitted to the EOS network, Block Producers have to process it.\n\nThe length of time (measured in microseconds) that a Block Producer requires to validate the transaction is called CPU. Put simply, EOS users and developers can get access to chainwide CPU and bandwidth resources by staking their tokens. Blocks are produced every 500 milliseconds. Each Block Producer has 200 milliseconds to validate the block. The remaining 300 milliseconds are left for distribution across the network.\n\nNotably, within the cap of 200 milliseconds, there is also a percentage threshold at which rate limiting begins across the network. In other words, when a block reaches the limit of 10% of the total 200 milliseconds CPU allowed per block, it triggers the CPU allocation algorithm to go into \u201ccongestion\u201d mode.\n\n\u201cBefore this limit is reached, all users can freely transact on the network as it is not in \u2018congestion mode,\u2019\u201d the article\u2019s author explained. \u201cOnce this limit is passed, users are throttled back to their pro-rata share of the total CPU-per-staked-EOS allotment.\u201d\n\nAs per another article penned by EOS Canada, a major Block Producer in the EOS blockchain network, if there were 1,000 tokens being staked for CPU at a given moment, and a single account had 20 tokens staked, then that account would be guaranteed 2% of the total CPU capacity of the network.\n\nHowever, if the network hasn\u2019t reached the threshold at which rate limiting is activated (not in \u201ccongestion\u201d mode), it allows that account to push transactions through above its guaranteed amount of 2%. Once that threshold is passed, the account cannot exceed the allotment. Moreover, during the \"congestion\" phase, the amount of CPU of each user starts decreasing until every congesting party runs out of CPU and stops taking CPU-consuming actions.\n\nDaniel Larimer, co-founder of EOS and chief technology officer at Block.one, refers to this mechanism as a \u201cfree benefit\u201d of the network:\n\n\u201cOwning and staking #eos gives users a prorata share of available bandwidth. When people don\u2019t use their share it is redirected to others on a prorata basis. During heavy use users no longer receive this free benefit.\u201d\n\nProblem: Congestion mode is too easy to trigger\n\nThe problem, Dexaran argued, is that the congestion mode is too easy to trigger. After analysis, the smart-contract developer noticed major CPU usage spikes at the beginning of each hour, allegedly caused by a betting DApp called EOSBetDice. Dexaran then decided to evaluate how much CPU is needed to push the network into congestion.\n\nFor the experiment, the developer staked 7,156 EOS for CPU. That amount of EOS can be borrowed from resource exchanges at the low cost of two EOS per month (less than $6), Dexaran stressed. To see how the test would affect average EOS network users, the security engineer preselected three random user accounts who were online playing the EOSKnights DApp right before the session started.\n\nThe developer then executed a contract that spawned lots of deferred transactions with a delay of one second, with each transaction consuming \u201c25 to 27 ms of CPU.\u201d After monopolizing the CPU utilization for an entire minute, the contract pushed the EOS network into congestion mode. As a result, all three sample accounts were out of CPU and therefore \u201cfrozen completely\u201d \u2014 basically meaning that all casual EOS users were unable to engage with any DApps on the network at the time.\n\nTwo minutes later, the aforementioned EOSBetDice DApp \u2014 which caused regular CPU spikes every hour, independent of the experiment \u2014 started operating as per the schedule. By consuming even more CPU from the network at the time it was already overloaded, it involuntarily contributed to the congestion initiated by Dexaran. \u201cThe more CPU you consume in a row, the \u2018deeper\u2019 a congestion mode will be, and the longer it will take for the network to recover to its normal mode,\u201d the developer noted.\n\nAs a result, the EOS network went into even \u201cdeeper\u201d congestion, and CPU availability reportedly shrunk by 35 times for all EOS users. \u201cNo matter how much EOS you staked for CPU \u2014 if you have used more than 3% then you would be frozen,\u201d Dexaran observed.\n\nAfter Dexaran\u2019s contract and EOSBetDice stressed the network for a total of five minutes, the network ostensibly stayed paralyzed for the next 10 minutes. After six more minutes passed, it had largely recovered, but the lending price of EOS at resource exchanges was still about three times higher than normal, indicating that the network required high amounts of tokens allocated in CPU at the time due to the stress test.\n\nThe network completely restored only 30 minutes after the last \"malicious\" action. That gives users \u201ca window of 25 minutes until the next congestion session,\u201d Dexaran noted, since the attack can be performed every hour, according to the developer\u2019s estimations. \u201c7000 EOS is enough to push EOS network into a congestion mode for a decent amount of time,\u201d the researcher concluded, adding:\n\n\u201cThe described congestion session will only cause problems for (1) users who spent a certain share of their CPU bandwidth, (2) users with very low CPU bandwidth staked. The described congestion session has no impact on (1) DApps that have a lot of CPU available, (2) users who do not engage in any activity and have their CPU fully available (assuming that these users have enough CPU to make a single tx).\u201d\n\nIn addition, Dexaran stressed that while some EOS users could call him or her a \"hacker\" due to intentionally overloading the network, \u201cI'm doing exactly the opposite: I'm protecting my investments and yours.\u201d\n\nNotably, a couple of days prior to Dexaran\u2019s entry on EOS congestion being published, developer Christoph Michel wrote a blog post linking the recent EOSPlay casino hack to network congestion, hence showcasing how the network problem might be exploited for profit.\n\nAccording to Michel, the attacker rented EOS tokens from REX, a CPU and NET resource rental market, and then stacked them to increase both his and EOSPlay\u2019s CPU to ensure the casino stayed functional \u2014 therefore remain able to pay out his bets. The hacker then spammed the network with transactions similarly to Dexaran, and played several dice games on EOSPlay, betting on a 50/50 outcome. Given that EOSPlay looks at the block hash of the result block and takes the first two characters \u2014 starting from the right and between zero and nine \u2014 as the dice roll, one has to predict the block hash of the result block to win the game.\n\n\u201cThe only unknowns in the prediction are the transactions included in the blocks,\u201d Michel explained. \u201cBut what if one could just spam and congest the network so nobody else can send transactions?\u201d\n\nAccording to the developer, that is exactly why the attacker borrowed EOS to spam the network: to have control over the network and therefore be able to predict the block hashes and win most of his or her bets. In case of a wrong prediction, the attacker could send another random transaction to the block and hence have an extra \u201ccoin flip,\u201d greatly improving the odds.\n\nUltimately, the hacker used just 300 EOS, worth a little over $1,000, which he or she could have rented for a couple of dollars. In return, the fixed winning galore brought in over 30,000 EOS, or around $110,000.\n\nEOS developers ensure that the network is \u201coperating correctly,\u201d not all agree\n\nDexaran\u2019s congestion experiments haven\u2019t gone unnoticed, as a number of users have reported having \u201cCPU problems\u201d on Twitter and Reddit. Denis Bredikhin, CEO of Graphene Lab, a team of smart contracts developers, confirmed to Cointelegraph that users of its poker-based EOS betting DApp has also experienced problems over the past weeks, although the application itself was not compromised. Bredikhin said:\n\n\u201cAt the peak of spam, players even with 8-10 thousand EOS allocated to CPU, could not do any operation.\u201d\n\nAccording to him, starting from Oct. 1, the players have to allocate \u201cup to 10,000 EOS\u201d in CPU so that the game would not stop for them during spam sessions. Meanwhile, Block.one\u2019s Larimer has taken to Twitter to reassure the community that EOS is \u201coperating correctly.\u201d He wrote:\n\n\u201cThis is no different than when attackers flood eth or bitcoin with high fee transaction spam. The network didn\u2019t freeze for token holders, there was just no extra bandwidth available for free use.\u201d\n\nSome community members beg to differ, however. \u201cThe difference between this attack on EOS and a high fee spam on BTC or ETH is you can still pay more to send a transaction on BTC or ETH,\u201d argued Rob Finch, CEO of U.S.-based EOS Block Producer CypherGlass. He added:\n\n\u201cMany EOS users did not have enough CPU to rent more CPU so it did freeze for them. Operating correctly\u2019 is not the best response IMO.\u201d\n\nAnother EOS user, blockchain entrepreneur Jared Moore, confirmed that the network was unusable for DApps or his wallet. He also wondered whether Block.one would \u201chelp the EOS community out and publish guidelines for how to prevent REX-attacks.\u201d\n\nCointelegraph has reached out to Block.one for further comment and will update the article once more information is obtained.", "description": "EOS users have been experiencing periodic problems with the network access, developers reassure that everything is \u201coperating correctly\u201d", "authors": ["Stephen O'Neal"], "top_image": "https://images.cointelegraph.com/images/740_IGh0dHBzOi8vczMuY29pbnRlbGVncmFwaC5jb20vc3RvcmFnZS91cGxvYWRzL3ZpZXcvN2FiZTkyYmEwMDhlNjRhYzFlYzJiNzkzNmVmMjRhYmQuanBn.jpg", "published_at": "2019-10-04"}