{"pub": "time", "url": "https://labs.time.com/story/puzzler-what-will-bert-and-amy-name-their-kid", "downloaded_at": "2019-09-04 04:07:38.087548+00:00", "published_at": "2019-09-04", "title": "Puzzler: What Will Bert and Amy Name Their Kid?", "language": "en", "text": "Puzzler: What Will Bert and Amy Name Their Kid?\n\nThe answer to the first TIME Labs puzzler\n\nAs longtime fans of Car Talk (even as less than enthusiastic fans of cars themselves), I\u2019m going to start rolling out the occasional puzzler to go alongside my favorite interactives. This first one occurred to me during my annual exploration of new data on the most popular baby names, which, as I\u2019ve often told people, is the Super Bowl data visualization.\n\nHere was the question:\n\nBert and Amy Cruz are celebrating the birth of their fourth child. Their first three children are named Ivy, Dewy and Bev. Which of the following names will they choose for their newborn boy?\n\nThe options are Edgar, Ira, Abel, and Claud. If you click hint, you can the following nudge: \u201cBert\u2019s brother Rolfe, who does everything the opposite of Bert, named his four children Zoe, Neda, Sonja and Yuri.\u201d\n\nThe answer, without further ado, is Abel. Can you guess why? Here\u2019s a hint: Bert married Amy for one particular reason: Like him, she has a name in why every letter appears in alphabetical order. They passed this along to their children: Ivy, for example, is spelled in alphabetical order (I comes before V, which comes before Y.) The same holds for Dewy, Bev and Abel (but not Edgar, Ira or Claud). Rolfe, on the other hand, has the opposite kind of name: His name appears in reverse alphabetical order, as do the names of his four kids.\n\nTo gather good names, I made use of Time Magazine\u2019s Baby Name database on Github and made a giant excel file of every American name used with any frequency since 1880. Then it was just a matter of writing a very simple script to scroll through each name and see which ones were in sequential alphabetical order, like so:\n\n// return 1 if name is ordered A-Z, -1 if Z-A, 0 if neither function is_ordered(name) { name = name.toLowerCase(); // A is the first letter, B is the second var A = name[0], B = name[1]; if (A === B) { // if letters repeat, like in Brook, fail the test return 0; } if (A < B) { var response = 1; } else { var response = -1; } // now loop through the rest of the letter for (var n = 1; n < name.length; n += 1) { // similar code as above var A = name[n], B = name[n+1]; if (A === B) { return 0; } if (A > B && response === 1 || A < B && response == -1) { return 0; } } return response; } // we loaded names from the Github repo names.forEach(function(name) { var order = ordered(name.name); if (order == -1 && name.name.length >= 3) { console.log(name.name, name.gender); } });\n\nBelow is a partial list of abecedarian names the code generates. Enjoy!", "description": "", "authors": [], "top_image": ""}