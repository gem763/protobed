{"pub": "zdnet", "url": "https://www.zdnet.com/article/microsofts-typescript-language-startup-reveals-long-journey-to-javascript-spin-off", "downloaded_at": "2019-10-15 12:28:04.357287+00:00", "title": "Microsoft's TypeScript language: Startup reveals long journey to JavaScript spin-off", "language": "en", "text": "Python's rise asks questions of JavaScript's dominance Rise in queries driven by interest in Python and community of new programmers.\n\nUS analytics startup Heap announced five years ago that it was saying goodbye to CoffeeScript and moving the front end of its web app to Microsoft's TypeScript 'superset' of the JavaScript programming language.\n\nHowever, the large migration project wasn't a screaming success. A Heap engineer has now revealed that it failed in its first attempt at migrating to TypeScript because it overlooked one key factor: human relationships.\n\nFortunately for Heap engineers, they finally cracked the puzzle earlier this year by refocusing its migration so that it became \"centered around people, not just tech\".\n\nSEE: How to build a successful developer career (free PDF)\n\nAccording to Heap software engineer Luke Autry, there was a \"broad preference for TypeScript\" among fellow engineers, but the company was moving in the \"wrong direction\" in terms of its goal to switch entirely to TypeScript.\n\n\"Yes, we were adding TypeScript code, but we were adding CoffeeScript at a faster rate,\" explains Autry.\n\n\"TypeScript and CoffeeScript target the same Node.js runtime, which you'd expect to help ease the transition, but despite the widespread desire to shift we hadn't built up much momentum and we weren't trending towards a future without CoffeeScript.\"\n\nWhile TypeScript has become one of the most popular JavaScript-related languages in recent years, CoffeeScript has been heading in the opposite direction.\n\nOne study rated CoffeeScript as one of the worst languages to learn in 2019. However, CoffeeScript still has some fans, as can be seen in a debate involving Heap engineers on Hacker News.\n\nAnyway, according to Autry, the key to reviving the TypeScript migration was figuring out how to get developers on board. His team believed this goal could be achieved by demonstrating to them that they could be more productive when writing TypeScript.\n\n\"If the team saw the change simply as a neutral shift between syntaxes, we'd never get buy-in. If the switch didn't make their day-to-day experience more productive, inertia would win out, even if engineers generally prefer to write typed code,\" wrote Autry.\n\nWith the focus now on developer productivity, engineers looked for areas of the codebase that would produce obvious gains, such as concentrating on converting files that delivered quick wins, as well as prioritizing tooling and configuration.\n\nThere were also technical barriers to be overcome. The migration team, for example, noticed engineers often needed to import special utilities to use TypeScript. So it focused on helping developers, so that they could write TypeScript in any service or component.\n\n\"Whether it's the back-end, front-end, scripts, or devops tasks, we wanted our engineers to be able to write code in TypeScript and have it just work,\" explained Autry.\n\nHe details a number of other steps the company took to ensure that the conversion process was simple, safe and automated, as well as improving the code review process.\n\nSEE: Microsoft TypeScript 3.7: Programming language beta lands with all these features\n\nOf course, ensuring everyone was able to feel and be productive meant offering a way for teammates to share problems that others may have the experience to solve. So the migration created a #typescript channel in Slack where developers leading the migration could answer questions and monitor for common issues.\n\n\"Developers need to know that any language and tooling questions they have will be answered promptly,\" wrote Autry.\n\n\"We decided to have the 'TypeScript champions' prioritize questions ahead of their own work. While this slowed down their work, it also removed a number of potentially major blocks to the migration.\"\n\nThe final key ingredients were tracking progress over time and having the fortune of being led by a business that allowed engineers to figure out the best way to achieve the goal of migrating totally to TypeScript.\n\nImage: Heap\n\nImage: Heap\n\nMore on Microsoft's TypeScript and programming languages", "description": "Startup Heap details how it initially failed to switch from CoffeeScript to TypeScript programming language.", "authors": ["Liam Tung"], "top_image": "https://zdnet3.cbsistatic.com/hub/i/r/2019/10/15/88a0bfc0-3cc9-4ad6-af52-ada3ea8af759/thumbnail/770x578/4dd8d93e14917f884161843f36f29ad9/blokeworkingistock-659493016.jpg", "published_at": "2019-10-15"}