{"pub": "zdnet", "url": "https://www.zdnet.com/article/security-researchers-expose-another-instance-of-chrome-patch-gapping", "downloaded_at": "2019-09-09 23:19:27.892920+00:00", "title": "Security researchers expose another instance of Chrome patch gapping", "language": "en", "text": "Security researchers have found another instance of \"patch gapping\" in the Google Chrome browser that could have been abused by hackers to develop exploits and launch attacks against Chrome users days before a patch would have been readily available for everyone.\n\nWhat is \"patch gapping?\"\n\n\"Patch gapping\" is a relatively new technical term that is used to describe gaps in the patching process of software that relies on open-source components.\n\nThe \"gap\" refers to the time between a security flaw is fixed in an open-source component and until the patch reaches the main software.\n\nResearchers argue that attackers can keep an eye out for bugfixes in open-source components and leverage the patch gap to launch attacks against more popular software that did not get to roll out a fix as they're still testing the patch.\n\nThis is exactly what happened last month to Google Chrome, today's most popular web browser, used by more than one billion users.\n\nChrome's latest patch gap\n\nWhile patch gaps happen all the time, not all software fixes can be manipulated in a way that's useful for developing weaponized exploits. \"Weaponizable\" bugs are rare, and not all of them happen to be in Chrome's open-source components.\n\nHowever, in a report published today, Istv\u00e1n Kurucsai, a security researcher for Exodus Intelligence, said he found one in V8, the open-source component used as Chrome's JavaScript engine.\n\nThe bug was both critical and widespread through the Chrome codebase; enough to be useful to develop an exploit that could allow attackers to execute malicious code inside users' browsers.\n\nThe \"patch gap\" occurred because the V8 bug (tracked as #992914) was patched in August, but the fix for Chrome users is scheduled to go live tomorrow, on September 10, with the release of Chrome 77.\n\nKurucsai argues that threat actors had weeks to scour the V8 changelog for security fixes and then develop exploits that could have been used against Chrome.\n\nProof-of-concept code available on GitHub\n\nDeveloping Chrome exploits is no trivial task, but a JavaScript-learned attacker could have done it. To prove that this was possible, Kurucsai released proof-of-concept code on GitHub that leveraged the original V8 bug to run malicious code inside Chrome.\n\nThis proof-of-concept code isn't fully weaponized since attackers need to use a second bug to escape the Chrome sandbox (protected environment). However this is not really an issue. Attackers could have used older Chrome sandbox escape bugs and combined the two bugs (V8 + sandbox escape) to attack users running older versions of Chrome, where both bugs are still unfixed. With a userbase of over one billion, even attacking older Chrome versions leaves attackers with a target base of tens of millions of vulnerable users for the picking.\n\nKurucsai hopes that companies take note of this new attack vector and take steps to minimize their patch gaps accordingly.\n\nThis is the second patch gap that Kurucsai discovered in Chrome's software supply chain. He found a first one in April, which also left Chrome users open to attacks for weeks.", "description": "Security bug patched in Chrome's V8 JavaScript engine, but the fix will only reach Chrome tomorrow.", "authors": ["Catalin Cimpanu"], "top_image": "https://zdnet1.cbsistatic.com/hub/i/r/2015/06/05/aca8aec9-1dc1-493e-9625-0ea0b8bf49ac/thumbnail/770x578/ed81c3e7402bb5855f623fbdc6684394/googlechromeiconlarge.png", "published_at": "2019-09-09"}